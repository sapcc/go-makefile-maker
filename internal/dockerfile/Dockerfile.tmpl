# SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company
# SPDX-License-Identifier: Apache-2.0

{{- $dcfg := .Config.Dockerfile }}

{{ range $dcfg.ExtraBuildStages -}}
{{ trimSpace . }}

################################################################################

{{ end -}}

FROM {{ .DockerHubMirror }}golang:{{ .Constants.DefaultGoVersion }}-alpine{{ .Constants.DefaultAlpineImage }} AS builder

RUN apk add --no-cache --no-progress ca-certificates gcc git make musl-dev {{- range $dcfg.ExtraBuildPackages }} {{.}}{{ end }}

COPY . /src
ARG BININFO_BUILD_DATE BININFO_COMMIT_HASH BININFO_VERSION # provided to 'make install'
RUN {{ if .UseBuildKit }}--mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
  {{ end }}make -C /src install PREFIX=/pkg GOTOOLCHAIN=local{{ if .Config.Golang.EnableVendoring }} GO_BUILDFLAGS='-mod vendor'{{ end }}

{{ range $dcfg.ExtraBuildDirectives -}}
{{ . }}

{{ end -}}
################################################################################

# To only build the tests run: docker build . --target test
# We can't do `FROM builder AS test` here, as then make prepare-static-check would not be cached during interactive use when developing
# and caching all the tools, especially golangci-lint, takes a few minutes.
FROM {{ .DockerHubMirror }}golang:{{ .Constants.DefaultGoVersion }}-alpine{{ .Constants.DefaultAlpineImage }} AS test

COPY Makefile /src/Makefile

# used below by USER
RUN addgroup -g 4200 appgroup \
  && adduser -h /home/appuser -s /sbin/nologin -G appgroup -D -u 4200 appuser

RUN apk add --no-cache --no-progress git make {{- range .ExtraTestPackages }} {{.}}{{ end }} \
{{- if .ReuseEnabled }}
  && pip3 install --break-system-packages reuse \
{{- end }}
  && make -C /src prepare-static-check


# We only copy here because we want the "prepare-static-check" to be cacheable.
# It is not a problem that we are overwriting the go cache from the earlier steps because we do not need to rebuild those tools.
COPY --from=builder /go /go
COPY --from=builder /src /src

RUN make -C /src static-check

# Some things like postgres do not like to run as root. For simplicity, just always run as an unprivileged user,
# but for it to be able to read the go cache, we need to allow it.
RUN chmod 777 -R /src/
USER 4200:4200
RUN cd /src \
  && git config --global --add safe.directory /src \
  && make build/cover.out

################################################################################

FROM {{ .DockerHubMirror }}alpine:{{ .Constants.DefaultAlpineImage }}

{{ if not $dcfg.RunAsRoot -}}
RUN addgroup -g 4200 appgroup \
  && adduser -h /home/appuser -s /sbin/nologin -G appgroup -D -u 4200 appuser

{{ end -}}
# upgrade all installed packages to fix potential CVEs in advance
# also remove apk package manager to hopefully remove dependency on OpenSSL ðŸ¤ž
RUN {{ .RunCommands }}

COPY --from=builder /etc/ssl/certs/ /etc/ssl/certs/
COPY --from=builder /etc/ssl/cert.pem /etc/ssl/cert.pem
COPY --from=builder /pkg/ /usr/
# make sure all binaries can be executed
{{- if .RunVersionCommands }}
RUN set -x \
  && {{ .RunVersionCommands }}
{{- end }}

ARG BININFO_BUILD_DATE BININFO_COMMIT_HASH BININFO_VERSION
LABEL source_repository="{{ .Config.Metadata.URL }}" \
  org.opencontainers.image.url="{{ .Config.Metadata.URL }}" \
  org.opencontainers.image.created=${BININFO_BUILD_DATE} \
  org.opencontainers.image.revision=${BININFO_COMMIT_HASH} \
  org.opencontainers.image.version=${BININFO_VERSION}

{{ range $dcfg.ExtraDirectives -}}
{{ . }}
{{ end -}}
{{ if $dcfg.RunAsRoot -}}
WORKDIR /
{{ else -}}
USER 4200:4200
WORKDIR /home/appuser
{{ end -}}
ENTRYPOINT [ {{ .Entrypoint }} ]
